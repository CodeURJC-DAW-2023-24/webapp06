openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v0
servers:
- url: http://localhost:8443
  description: Generated server url
paths:
  /api/users/{userId}/activate:
    put:
      tags:
      - user-api-rest-controller
      summary: Activate user
      description: Activate an user
      operationId: activateUser
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: User successfully activated
          content:
            '*/*':
              schema:
                type: object
        "404":
          description: User Not Found
          content:
            '*/*':
              schema:
                type: object
  /api/posts/{postId}:
    get:
      tags:
      - post-api-rest-controller
      summary: Get a post
      description: Gets a post.
      operationId: getPostsById
      parameters:
      - name: postId
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Post found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostDTO'
        "400":
          description: Bad request body
        "404":
          description: Post not found
        "500":
          description: Internal server error
    put:
      tags:
      - post-api-rest-controller
      summary: Edit a post
      description: Edits a post.
      operationId: editPost
      parameters:
      - name: postId
        in: path
        required: true
        schema:
          type: string
      - name: validate
        in: query
        required: false
        schema:
          type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostAddDTO'
        required: true
      responses:
        "200":
          description: Post edited successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostDTO'
        "400":
          description: Bad request body
        "401":
          description: Unauthorized
        "404":
          description: Post or Thread not found
        "500":
          description: Internal server error
    delete:
      tags:
      - post-api-rest-controller
      summary: Delete a post
      description: Deletes a post.
      operationId: deletePost_1
      parameters:
      - name: postId
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Post deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostDTO'
        "400":
          description: Bad request body
        "401":
          description: Unauthorized
        "404":
          description: Post not found
        "500":
          description: Internal server error
  /api/users/:
    get:
      tags:
      - user-api-rest-controller
      summary: Get all users
      description: Get all users without paginated
      operationId: getUsersPaginated_1
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      tags:
      - user-api-rest-controller
      summary: Create user
      description: Create a new user and add it to the app.
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDTO'
        required: true
      responses:
        "201":
          description: User created successfully
          headers:
            Location:
              description: Link to the newly created user
              style: simple
              schema:
                type: string
          content:
            '*/*':
              schema:
                type: object
        "400":
          description: Bad request body
  /api/threads/:
    get:
      tags:
      - thread-api-rest-controller
      summary: Get all thread from a forum
      description: Gets all thread from a forum.
      operationId: getThreadsByForum
      parameters:
      - name: forumName
        in: query
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Threads found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThreadDTO'
        "404":
          description: Forum not found
        "500":
          description: Internal server error
    post:
      tags:
      - thread-api-rest-controller
      summary: Create thread
      description: Create a new thread and add it to the forum.
      operationId: addThread
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ThreadAddDTO'
        required: true
      responses:
        "201":
          description: Thread created successfully
          headers:
            Location:
              description: Link to the newly created thread
              style: simple
              schema:
                type: string
          content:
            '*/*':
              schema:
                type: object
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                type: object
  /api/posts/:
    get:
      tags:
      - post-api-rest-controller
      summary: Get all posts
      description: Gets all posts.
      operationId: getPosts
      parameters:
      - name: thread
        in: query
        required: false
        schema:
          type: integer
          format: int64
      - name: page
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: size
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 10
      - name: reported
        in: query
        required: false
        schema:
          type: boolean
      responses:
        "200":
          description: Posts found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostDTO'
        "400":
          description: Bad request body
        "401":
          description: Unauthorized
        "404":
          description: Thread not found
        "500":
          description: Internal server error
    post:
      tags:
      - post-api-rest-controller
      summary: Create post
      description: Create a new post and add it to the thread.
      operationId: addPost
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostAddDTO'
        required: true
      responses:
        "201":
          description: Post created successfully
          headers:
            Location:
              description: Link to the newly created post
              style: simple
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostDTO'
        "400":
          description: Bad request body
        "401":
          description: Unauthorized
        "404":
          description: Thread not found
        "500":
          description: Internal server error
  /api/auth/refresh:
    post:
      tags:
      - login-api-rest-controller
      operationId: refreshToken
      parameters:
      - name: refreshToken
        in: cookie
        required: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AuthResponse'
  /api/auth/logout:
    post:
      tags:
      - login-api-rest-controller
      operationId: logOut
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AuthResponse'
  /api/auth/login:
    post:
      tags:
      - login-api-rest-controller
      operationId: login
      parameters:
      - name: accessToken
        in: cookie
        required: false
        schema:
          type: string
      - name: refreshToken
        in: cookie
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AuthResponse'
  /thread/user/paginated:
    get:
      tags:
      - thread-rest-controller
      operationId: getPaginatedThreadsByUsername
      parameters:
      - name: page
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: size
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 10
      - name: username
        in: query
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageThread'
  /thread/paginated:
    get:
      tags:
      - thread-rest-controller
      operationId: getPaginatedThreads
      parameters:
      - name: page
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: size
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 10
      - name: nameForum
        in: query
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageThread'
  /p/validate/{postId}:
    get:
      tags:
      - post-rest-controller
      operationId: validatePost
      parameters:
      - name: postId
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
  /p/update/{postId}:
    get:
      tags:
      - post-rest-controller
      operationId: update
      parameters:
      - name: postId
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /p/threads/{threadId}/posts:
    get:
      tags:
      - post-rest-controller
      operationId: getPostsByThread
      parameters:
      - name: threadId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: page
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: size
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 10
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PagePost'
  /p/reports:
    get:
      tags:
      - post-rest-controller
      operationId: getReportedPaginated
      parameters:
      - name: page
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: size
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 10
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PagePostReportDTO'
  /p/report/{postId}:
    get:
      tags:
      - post-rest-controller
      operationId: getMethodName
      parameters:
      - name: postId
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: boolean
  /p/like/{postId}:
    get:
      tags:
      - post-rest-controller
      operationId: likePost
      parameters:
      - name: postId
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: boolean
  /p/invalidate/{postId}:
    get:
      tags:
      - post-rest-controller
      operationId: invalidatePost
      parameters:
      - name: postId
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
  /p/dislike/{postId}:
    get:
      tags:
      - post-rest-controller
      operationId: dislikePost
      parameters:
      - name: postId
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: boolean
  /p/delete/{postId}/{threadName}:
    get:
      tags:
      - post-rest-controller
      operationId: deletePost
      parameters:
      - name: postId
        in: path
        required: true
        schema:
          type: string
      - name: threadName
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: boolean
  /chart-rest/threads/weekly:
    get:
      tags:
      - chart-rest-controller
      operationId: getWeeklyThreadsChart
      parameters:
      - name: date
        in: query
        required: true
        schema:
          type: string
          format: date
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /chart-rest/threads/monthly:
    get:
      tags:
      - chart-rest-controller
      operationId: getMonthlyThreadsChart
      parameters:
      - name: date
        in: query
        required: true
        schema:
          type: string
          format: date
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /chart-rest/threads/annually:
    get:
      tags:
      - chart-rest-controller
      operationId: getAnnuallyThreadsChart
      parameters:
      - name: date
        in: query
        required: true
        schema:
          type: string
          format: date
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /chart-rest/posts/weekly:
    get:
      tags:
      - chart-rest-controller
      operationId: getWeeklyPostsChart
      parameters:
      - name: date
        in: query
        required: true
        schema:
          type: string
          format: date
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /chart-rest/posts/monthly:
    get:
      tags:
      - chart-rest-controller
      operationId: getMonthlyPostsChart
      parameters:
      - name: date
        in: query
        required: true
        schema:
          type: string
          format: date
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /chart-rest/posts/annually:
    get:
      tags:
      - chart-rest-controller
      operationId: getAnnuallyPostsChart
      parameters:
      - name: date
        in: query
        required: true
        schema:
          type: string
          format: date
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /api/users/{userId}:
    get:
      tags:
      - user-api-rest-controller
      summary: Get user
      description: Get user by id
      operationId: getUserById
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: User successfully found
          content:
            '*/*':
              schema:
                type: object
        "404":
          description: User Not Found
          content:
            '*/*':
              schema:
                type: object
    delete:
      tags:
      - user-api-rest-controller
      summary: Delete user
      description: Delete user by id
      operationId: deleteUserById
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: User successfully deleted
          content:
            '*/*':
              schema:
                type: object
        "404":
          description: User Not Found
          content:
            '*/*':
              schema:
                type: object
  /api/users/{userId}/status:
    get:
      tags:
      - user-api-rest-controller
      summary: Get user status
      description: Get the status of an user by id
      operationId: checkUserStatus
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: User successfully found
          content:
            '*/*':
              schema:
                type: object
        "404":
          description: User Not Found
          content:
            '*/*':
              schema:
                type: object
  /api/users/{userId}/image:
    get:
      tags:
      - user-api-rest-controller
      summary: Get user image
      description: Get the image of an user by id
      operationId: getUserImage
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: User successfully found
          content:
            '*/*':
              schema:
                type: object
        "404":
          description: User Not Found
          content:
            '*/*':
              schema:
                type: object
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
  /api/users/search:
    get:
      tags:
      - user-api-rest-controller
      summary: Search Users
      description: Search users by username starting with paginated
      operationId: getUsersByUsernameStartingWithPaginated
      parameters:
      - name: page
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: size
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 10
      - name: username
        in: query
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageUser'
  /api/users/paginated:
    get:
      tags:
      - user-api-rest-controller
      summary: Paginated Users
      description: Get all users paginated
      operationId: getUsersPaginated
      parameters:
      - name: page
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: size
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 10
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageUser'
  /api/threads/{threadId}:
    get:
      tags:
      - thread-api-rest-controller
      summary: Get a thread
      description: Gets a thread.
      operationId: getThreadById
      parameters:
      - name: threadId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Thread found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThreadDTO'
        "404":
          description: Thread not found
        "500":
          description: Internal server error
    delete:
      tags:
      - thread-api-rest-controller
      operationId: deleteThread
      parameters:
      - name: threadId
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /api/forums:
    get:
      tags:
      - forum-api-rest-controller
      summary: Gets all forums
      description: Provides a list of all the forums in the web.
      operationId: getForums
      responses:
        "200":
          description: Successful operation
          content:
            application/json: {}
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                type: object
  /api/forums/{id}:
    get:
      tags:
      - forum-api-rest-controller
      summary: Gets a forum by id
      description: Provides a forum based on the specified id.
      operationId: getForumById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Successful operation
          content:
            application/json: {}
        "404":
          description: Forum not found
          content:
            '*/*':
              schema:
                type: object
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                type: object
  /api/forums/trending:
    get:
      tags:
      - forum-trending-api-rest-controller
      summary: Gets trending forums
      description: Provides a list of the trending forums in the web.
      operationId: getTrendingForums
      responses:
        "200":
          description: Successful operation
          content:
            application/json: {}
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                type: object
  /api/chart/threads/weekly:
    get:
      tags:
      - chart-api-rest-controller
      summary: Gets weekly thread chart
      description: Provides a chart of weekly thread activity based on the specified
        date.
      operationId: getWeeklyThreadsChart_1
      parameters:
      - name: date
        in: query
        required: true
        schema:
          type: string
          format: date
      responses:
        "200":
          description: Successful operation
          content:
            application/json: {}
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: string
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                type: string
  /api/chart/threads/monthly:
    get:
      tags:
      - chart-api-rest-controller
      summary: Gets monthly thread chart
      description: Provides a chart of monthly thread activity based on the specified
        date.
      operationId: getMonthlyThreadsChart_1
      parameters:
      - name: date
        in: query
        required: true
        schema:
          type: string
          format: date
      responses:
        "200":
          description: Successful operation
          content:
            application/json: {}
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: string
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                type: string
  /api/chart/threads/annually:
    get:
      tags:
      - chart-api-rest-controller
      summary: Gets annually thread chart
      description: Provides a chart of annually thread activity based on the specified
        date.
      operationId: getAnnuallyThreadsChart_1
      parameters:
      - name: date
        in: query
        required: true
        schema:
          type: string
          format: date
      responses:
        "200":
          description: Successful operation
          content:
            application/json: {}
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: string
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                type: string
  /api/chart/posts/weekly:
    get:
      tags:
      - chart-api-rest-controller
      summary: Gets weekly post chart
      description: Provides a chart of weekly post activity based on the specified
        date.
      operationId: getWeeklyPostsChart_1
      parameters:
      - name: date
        in: query
        required: true
        schema:
          type: string
          format: date
      responses:
        "200":
          description: Successful operation
          content:
            application/json: {}
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: string
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                type: string
  /api/chart/posts/monthly:
    get:
      tags:
      - chart-api-rest-controller
      summary: Gets monthly post chart
      description: Provides a chart of monthly post activity based on the specified
        date.
      operationId: getMonthlyPostsChart_1
      parameters:
      - name: date
        in: query
        required: true
        schema:
          type: string
          format: date
      responses:
        "200":
          description: Successful operation
          content:
            application/json: {}
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: string
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                type: string
  /api/chart/posts/annually:
    get:
      tags:
      - chart-api-rest-controller
      summary: Gets annually post chart
      description: Provides a chart of annually post activity based on the specified
        date.
      operationId: getAnnuallyPostsChart_1
      parameters:
      - name: date
        in: query
        required: true
        schema:
          type: string
          format: date
      responses:
        "200":
          description: Successful operation
          content:
            application/json: {}
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: string
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                type: string
components:
  schemas:
    PostDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        text:
          type: string
        imageFile:
          type: array
          items:
            type: string
            format: byte
        ownerUsername:
          type: string
        createdAt:
          type: string
          format: date-time
        threadName:
          type: string
        likes:
          type: integer
          format: int32
        dislikes:
          type: integer
          format: int32
        reports:
          type: integer
          format: int32
        image:
          type: array
          writeOnly: true
          items:
            type: string
            format: byte
        thread:
          type: string
          writeOnly: true
    PostAddDTO:
      type: object
      properties:
        text:
          type: string
        imageFile:
          type: array
          items:
            type: string
            format: byte
        threadId:
          type: integer
          format: int64
        liked:
          type: boolean
        disliked:
          type: boolean
        reported:
          type: boolean
    UserDTO:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
        password:
          type: string
    ThreadAddDTO:
      type: object
      properties:
        forumId:
          type: integer
          format: int64
        text:
          type: string
    AuthResponse:
      type: object
      properties:
        status:
          type: string
          enum:
          - SUCCESS
          - FAILURE
        message:
          type: string
        error:
          type: string
    LoginRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    Forum:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        icon:
          type: string
    PageThread:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/Thread'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/PageableObject'
        empty:
          type: boolean
    PageableObject:
      type: object
      properties:
        offset:
          type: integer
          format: int64
        sort:
          $ref: '#/components/schemas/SortObject'
        pageNumber:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        paged:
          type: boolean
        unpaged:
          type: boolean
    Post:
      type: object
      properties:
        id:
          type: integer
          format: int64
        text:
          type: string
        owner:
          $ref: '#/components/schemas/User'
        createdAt:
          type: string
          format: date-time
        thread:
          $ref: '#/components/schemas/Thread'
        userLikes:
          type: array
          items:
            $ref: '#/components/schemas/User'
        userDislikes:
          type: array
          items:
            $ref: '#/components/schemas/User'
        reports:
          type: integer
          format: int32
        likes:
          type: integer
          format: int32
        dislikes:
          type: integer
          format: int32
    SortObject:
      type: object
      properties:
        empty:
          type: boolean
        sorted:
          type: boolean
        unsorted:
          type: boolean
    Thread:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        forum:
          $ref: '#/components/schemas/Forum'
        posts:
          type: array
          items:
            $ref: '#/components/schemas/Post'
        owner:
          $ref: '#/components/schemas/User'
        createdAt:
          type: string
          format: date-time
        numberPosts:
          type: integer
          format: int32
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        email:
          type: string
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time
        roles:
          type: array
          items:
            type: string
    PagePost:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/Post'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/PageableObject'
        empty:
          type: boolean
    PagePostReportDTO:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/PostReportDTO'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/PageableObject'
        empty:
          type: boolean
    PostReportDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        text:
          type: string
        owner:
          $ref: '#/components/schemas/User'
        thread:
          $ref: '#/components/schemas/Thread'
        reports:
          type: integer
          format: int32
    PageUser:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/User'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/PageableObject'
        empty:
          type: boolean
    ThreadDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        forum:
          $ref: '#/components/schemas/Forum'
        posts:
          type: array
          items:
            $ref: '#/components/schemas/Post'
        owner:
          $ref: '#/components/schemas/User'
        createdAt:
          type: string
          format: date-time
        numberPosts:
          type: integer
          format: int32
